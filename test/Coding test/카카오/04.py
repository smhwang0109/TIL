from pprint import pprint
from collections import deque
from copy import deepcopy

def BFS(visited):
    que = deque()
    que.append([0,0,-1,0])
    while que:
        i, j, pre, sumv = que.popleft()
        if i == N - 1 and j == N - 1:
            return sumv
        for k in range(4):
            new_i = i + di[k]
            new_j = j + dj[k]
            if 0 <= new_i < N and 0 <= new_j < N:
                if not visited[new_i][new_j]:
                    visited[new_i][new_j] = 1
                    if pre == -1 or pre == k:
                        que.append([new_i, new_j, k, sumv + 100])
                    else:
                        que.append([new_i, new_j, k, sumv + 600])


def DFS(visited, i, j, pre, sumv):
    global minv, N
    if minv <= sumv:
        return
    if i == N - 1 and j == N - 1:
        if minv > sumv:
            minv = sumv
            return
    for k in range(4):
        new_i = i + di[k]
        new_j = j + dj[k]
        if 0 <= new_i < N and 0 <= new_j < N:
            if not visited[new_i][new_j]:
                visited[new_i][new_j] = 1
                if pre == -1 or pre == k:
                    DFS(visited, new_i, new_j, k, sumv + 100)
                else:
                    DFS(visited, new_i, new_j, k, sumv + 600)
                visited[new_i][new_j] = 0



def solution(board):
    global minv, N
    N = len(board)
    board[0][0] = 1
    new_board = deepcopy(board)
    minv = BFS(new_board)
    DFS(board, 0, 0, -1, 0)

    return minv

di = [1,-1,0,0]
dj = [0,0,1,-1]

print(solution([[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]]))