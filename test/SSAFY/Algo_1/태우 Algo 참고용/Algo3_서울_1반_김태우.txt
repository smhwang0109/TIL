# 보기의 흑백그림을 압축한 결과는 아래와 같다.

xx1110x1x100011xxx11000111x1x00111010

## 간단한 해설
### 괄호와 쉼표로 간단하게 구분해본다면 아래과 같이 나타낼 수 있다.
#### 각 쉼표의 앞부분이 사각형을 4등분 했을 때의 왼위, 오위, 왼아래, 오아래 사각형을 나타낸다.
#### 4등분했음을 나타내는 x 는 괄호 안에 반드시 4개의 부분을 가져야 한다.

x
(
  x(1, 1, 1, 0),
  x
  (
    1,
    x(1, 0, 0, 0),
    1,
    1
  ),
  x
  (
    x
    (
      x(1, 1, 0, 0), 
      0, 
      1, 
      1
    ),
    1,
    x
    (
      1, 
      x(0, 0, 1, 1), 
      1, 
      0
    ),
    1
  ),
  0
)

# 슈도코드

def checkAllSameColor(image): # image: 모든 픽셀의 색을 체크할 이미지 영역
    color <- image[0][0] # 영역의 기준 색 구하기 흰색이면 1, 검은색이면 0
    image_side_length <- len(image[0]) # 이미지 한 변 길이 구하기
    for r in range(image_side_length):
        for c in range(image_side_length):
            if image[r][c] 의 색이 color 와 같지 않다면:
                return -1 # 일치하지 않으면 0과 1 이 아닌 -1 을 반환해서 일치하지 않음을 알림
    return color # 일치시 이 영역의 색 알림

def 네조각나누기(image):
    image_side_length <- len(image[0]) # 이미지 한 변 길이 구하기
    do 조각들 <- [] # 빈 리스트
    do half <- image_side_length // 2
    조각들.append(half 를 기준으로 전후 영역으로 나뉜 4개의 조각)
    return 조각들

def divideFour(image): # image: 4조각으로 나눌 이미지 영역
    do answer <- "x"  # 함수 진입순간 나누기로 한 것이므로, 처음부터 x 가지고 시작.
    do 조각들 <- 네조각나누기(image)  # 네조각나누기: 이미지를 4조각으로 나누어, 4개의 원소를 가진 리스트에 담아 반환하는 함수
    for i in range(4):
        do 각조각검사결과 <- checkAllSameColor(조각들[i])  # 각 조각 검사결과 저장
        if 각조각검사결과 == -1:
            answer += divideFour(조각들[i])  # 조각검사결과가 -1 인 경우, 다시 재귀함수 실행하고 그 결과값을 answer 에 누적
        else:
            answer += 각조각검사결과  # 조각검사결과가 -1이 아닌경우, 곧바로 answer 에 조각 color 누적

    return answer

# 메인 코드 실행 부분

answer <- "" # 빈문자열로 시작 (함수 내 answer 와 별개)

if checkAllSameColor(originalImage) == -1:
    answer += divideFour(originalImage)
else:   # 예외: 만약 원본 이미지가 나눌 필요 없는 단색이라면, 곧바로 해당 색 반환 후 종료
    answer += checkAllSameColor(originalImage)

print(answer) # 정답 출력
